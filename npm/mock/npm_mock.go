// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snyk/snyk-code-review-exercise/npm (interfaces: Client)
//
// Generated by this command:
//
//	mockgen . Client
//

// Package mock_npm is a generated GoMock package.
package mock_npm

import (
	reflect "reflect"

	npm "github.com/snyk/snyk-code-review-exercise/npm"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchPackage mocks base method.
func (m *MockClient) FetchPackage(name, version string) (*npm.NpmPackageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackage", name, version)
	ret0, _ := ret[0].(*npm.NpmPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackage indicates an expected call of FetchPackage.
func (mr *MockClientMockRecorder) FetchPackage(name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackage", reflect.TypeOf((*MockClient)(nil).FetchPackage), name, version)
}

// FetchPackageMeta mocks base method.
func (m *MockClient) FetchPackageMeta(p string) (*npm.NpmPackageMetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackageMeta", p)
	ret0, _ := ret[0].(*npm.NpmPackageMetaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackageMeta indicates an expected call of FetchPackageMeta.
func (mr *MockClientMockRecorder) FetchPackageMeta(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackageMeta", reflect.TypeOf((*MockClient)(nil).FetchPackageMeta), p)
}
